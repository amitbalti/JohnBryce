///// 'async' & 'await' /////
'Async' and 'await' are methods in JavaScript that are used to handle asynchronous operations.

'Async' is a keyword used to define an asynchronous function. 
An asynchronous function is a function that runs independently of the main program flow, allowing the program to continue executing other tasks while the function is running. 
This is useful for tasks that may take a long time to complete, such as fetching data from a server or reading a large file.

'Await' is a keyword used inside an asynchronous function to indicate that the program should wait for a specific task to complete before moving on to the next line of code. 
This allows for a more synchronous-like flow of code execution, making it easier to understand and write complex asynchronous operations.

For example, consider the following code:

    async function fetchData() {
        const response = await fetch('https://example.com/data');
        const data = await response.json();
        console.log(data);
    }
    fetchData();
    console.log('Fetching data...');
In this example, the 'fetchData' function is defined as asynchronous using the 'async' keyword. 
Inside the function, the 'await' keyword is used to wait for the fetch operation to complete and the response to be returned before moving on to the next line of code. The program will continue executing the next line, 'console.log('Fetching data...');', while the data is being fetched. 
Once the data is returned, the program will then log the data to the console.

Using 'async' and 'await' allows for a more readable and manageable flow of code execution when working with asynchronous tasks, making it easier to handle and debug these types of operations.

///// callback /////
A callback in JavaScript is a function that is passed as an argument to another function and is called after the first function is completed. 
It is a way to execute a specific function after another function has finished its execution. 
This allows for a more efficient and organized way to handle asynchronous tasks.

///// Promise /////

A promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation, and its resulting value. 
Promises provide a way to register callbacks to be called when the asynchronous operation completes, rather than using the callback pattern directly. 
They also provide a way to handle errors that may occur during the asynchronous operation. 
Promises can be in one of three states: 
    - Pending.
    - Fulfilled
    - Rejected. 
Once a promise is fulfilled or rejected, it cannot change its state.

/// Why would I work with promise? /// 
Promises in JavaScript are used to handle asynchronous operations, such as making network requests or reading from a file. 
They provide a way to handle the success and failure of an asynchronous operation in a consistent and organized manner, rather than using callback functions. 
This can make your code more readable and easier to maintain. 
Additionally, Promises can be combined and chained together to allow for complex asynchronous operations to be handled in a manageable way.


/// Promises in JavaScript have three states: /// 
    - Pending. 
        This is the initial state of a promise. 
        It means that the promise is still in progress and has not yet been fulfilled or rejected.
    - Fulfilled. 
        This state indicates that the promise has completed successfully and a value is available. 
        The value can be accessed using the then() method.
    - Rejected.
        This state indicates that the promise has failed and an error is available. 
        The error can be accessed using the catch() method.

Once a promise is fulfilled or rejected, it cannot change its state. 
This means that if a promise is fulfilled, it will always have a value, and if it is rejected, it will always have an error. 
This allows for the chaining of multiple promises together, where the output of one promise is used as input for another promise.

It's worth noting that 'then()' and 'catch()' are methods that are used to handle the promise once it is fulfilled or rejected. 
They take callbacks as arguments that are called with the value or error of the promise, respectively.

/// ///
All of this are stoppages to our pending:
    - URL - we requested something from a server and we are waiting for response.
    - File - we are waiting until we are sending the file to the client.
    - DB(DataBases) 
    - WIFI 
    - Bluetooth

When it reject:
    - URL - 404, 403 and so on.
    - File - file is open (and I can't open it as well), read only. 
    - DB - url is not valid, sql (syntax error) isn't valid

Resolve:
    When we get the data.


///// try & catch /////

In JavaScript, the 'try' and 'catch' method is used for error handling. 
The 'try' block is used to enclose the code that may throw an exception, 
    and the 'catch' block is used to handle the exception. 
If an exception is thrown within the try block, the code in the catch block will be executed.

Example:
    try {
        // code that may throw an exception
    } catch (error) {
        // code to handle the exception
    }

You can also use the 'finally' block to execute code after the 'try' and 'catch' block.
This code will be executed whether an exception was thrown or not.

Example:

    try {
        // code that may throw an exception
    } catch (error) {
        // code to handle the exception
    } finally {
        // code to be executed regardless of the try-catch outcome
    }
In the catch block, the exception object is passed as a parameter which can be used to get information about the error and take appropriate action.

///// Differences between ".then" and ".catch" /////
".then" is used to handle a successful completion of a promise, while ".catch" is used to handle an error or rejection of a promise.

For example: 
    - If you have a promise that is resolving a value, you can use the ".then" method to access that value and perform some action on it. 
    - On the other hand, if that promise is rejected and throws an error, you can use the ".catch" method to handle that error and perform some action, such as logging the error or displaying an error message to the user.

A typical example of using ".then" and ".catch" is:
    fetch('https://api.com/data')
        .then(response => response.json())
        .then(data => console.log(data))
        .catch(error => console.log(error))
Here, if the fetch request is successful, it will get the json data by calling response.json() and logs the data in console. 
If the fetch request is not successful or throws an error, it will catch the error and logs the error in console.

////////////////////////////////
HW:
- https://coffee.alexflipnote.dev/
    - Show 6 pictures on the screen.